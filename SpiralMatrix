package com.company;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class SymmentricalMatrix {
	public static void main(String[] args) {
		List<List<Integer>> inputMatrix = new ArrayList<>();
		inputMatrix.add(Arrays.asList(1, 2, 3, 4));
		inputMatrix.add(Arrays.asList(5, 6, 7, 8));
		inputMatrix.add(Arrays.asList(9, 10, 11, 12));
		inputMatrix.add(Arrays.asList(13, 14, 15, 16));
		SymmentricalMatrix sm = new SymmentricalMatrix();
		List<Integer> outList = new ArrayList<>();
		inputMatrix.get(0).forEach(i -> {
			outList.add(i);
		});
		inputMatrix = sm.transposeMatrix(inputMatrix, 0);
		inputMatrix.get(inputMatrix.size() - 1).forEach(i -> {
			outList.add(i);
		});
		inputMatrix = sm.transposeMatrix(inputMatrix, inputMatrix.size() - 1);

		Collections.reverse(inputMatrix.get(inputMatrix.size() - 1));
		inputMatrix.get(inputMatrix.size() - 1).forEach(i -> {
			outList.add(i);
		});
		inputMatrix = sm.transposeMatrix(inputMatrix, inputMatrix.size() - 1);
		
		Collections.reverse(inputMatrix.get(0));
		inputMatrix.get(0).forEach(i -> {
			outList.add(i);
		});
		
		inputMatrix = sm.transposeMatrix(inputMatrix, 0);
		
		inputMatrix.get(0).forEach(i -> {
			outList.add(i);
		});
		
		inputMatrix = sm.transposeMatrix(inputMatrix, 0);
		
		inputMatrix.get(inputMatrix.size() - 1).forEach(i -> {
			outList.add(i);
		});
		
		inputMatrix = sm.transposeMatrix(inputMatrix, inputMatrix.size() - 1);
		

		inputMatrix.get(0).forEach(i -> {
			outList.add(i);
		});

		System.out.println(outList);

		System.out.println(inputMatrix);

//        System.out.println(sm.transposeMatrix(inputMatrix,0).toString());

	}

	List<List<Integer>> transposeMatrix(List<List<Integer>> inputMatrix, int index) {
		inputMatrix.remove(index);
		List<List<Integer>> transposeMatrix = new ArrayList<>();
		for (int i = 0; i < inputMatrix.get(0).size(); i++) {
			List<Integer> temp = new ArrayList<>();
			for (int j = 0; j < inputMatrix.size(); j++) {
				temp.add(inputMatrix.get(j).get(i));
			}
			transposeMatrix.add(temp);
		}
		return transposeMatrix;
	}
}
